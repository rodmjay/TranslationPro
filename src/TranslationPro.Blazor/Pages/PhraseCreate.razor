@page "/applications/{ApplicationId:guid}/create-phrase"
@using TranslationPro.Blazor.Services
@inherits ApplicationDetailsBase
@layout MainLayout

<Bar>
    <BarStart>
        <ApplicationBreadcrumb NavigationItems="@NavigationItems"></ApplicationBreadcrumb>
    </BarStart>
</Bar>

<Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>Add New Phrases</CardTitle>
            </CardHeader>
            <CardBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    
                    @for (var index = 0; index < Phrases.Count; index++)
                    {
                        var local = index;
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Fields>
                                <Field ColumnSize="ColumnSize.Is10">
                                    <TextEdit @bind-Text="@Phrases[local].Value" Disabled="@IsSubmitting" Placeholder="Enter Text"/>
                                </Field>
                                <Field ColumnSize="ColumnSize.Is2">
                                    <Button Color="Color.Danger" Disabled="@IsSubmitting" Clicked="() => RemoveItem(local)">Remove</Button>
                                </Field>
                            </Fields>
                            
                        </Validation>
                    }
                    <Button Color="Color.Secondary" Disabled="@IsSubmitting" Clicked="AddItem">Add Item</Button>
                    <Button Color="Color.Primary" Loading="@IsSubmitting" Clicked="HandleSubmit">Submit</Button>
                </Validations>

            </CardBody>
        </Card>
    </Column>
</Row>
@code {

    [Inject]
    public IApplicationPhrasesController ApplicationPhraseProxy { get; set; }

    private List<FormResponse> Phrases { get; } = new();

    protected void AddItem()
    {
        Phrases.Add(new FormResponse()
        {
            Value = null
        });
    }

    private bool IsSubmitting = false;

    private void RemoveItem(int index)
    {
        Phrases.RemoveAt(index);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            AddItem();
        }

    }

    protected override async Task LoadData()
    {
        await base.LoadData();

        NavigationItems.Add(new NavigationItem()
            {
                Title = "Create Phrase"
            });
    }

    private async Task HandleSubmit(MouseEventArgs evnt)
    {
        IsSubmitting = true;
        var cleanItems = Phrases.Select(x => x.Value).ToList();

        var result = await ApplicationPhraseProxy.CreatePhrasesAsync(ApplicationId, new ApplicationPhrasesCreateOptions
        {
            Texts = cleanItems
        });

        IsSubmitting = false;

        if (result != null)
        {

            NavigationManager.NavigateTo($"/applications/{ApplicationId}");
        }
    }

}