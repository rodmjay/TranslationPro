@if (Application != null && Languages != null)
{


    @if (Languages != null)
    {
        @foreach (var lang in Languages)
        {

            @if (!Application.Languages.Select(x => x.Id).Contains(lang.Id))
            {
                <Check TValue="bool" Disabled="@Disabled" Checked="false" CheckedChanged="()=>HandleEnableClick(lang.Id)">@lang.Name</Check>
            }
            else
            {
                <Check TValue="bool" Disabled="@Disabled" Checked="true" CheckedChanged="()=>HandleDisableClick(lang.Id)">@lang.Name</Check>
            }
        }
    }
}
else
{
    <p>Loading...</p>
}
@code {
    [Inject]
    public IApplicationsController ApplicationsController { get; set; }

    [Inject]
    public ILanguagesController LanguagesController { get; set; }

    [Inject]
    public IApplicationLanguagesController ApplicationLanguagesController { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }
        
    public ICollection<LanguageOutput> Languages { get; set; }

    [CascadingParameter]
    private RouteData RouteData { get; set; }

    [Parameter]
    public EventCallback LanguagesChanged { get; set; }

    public Guid ApplicationId => RouteData.GetApplicationId();

    public ApplicationOutput Application { get; set; }

    private bool Disabled { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        this.Application = null;
        this.Disabled = true;
        Languages = await LanguagesController.GetLanguagesAsync().ConfigureAwait(true);
        Application = await ApplicationsController.GetApplicationAsync(ApplicationId).ConfigureAwait(true);

        this.Disabled = false;
    }

    private async Task HandleEnableClick(string language)
    {
        this.Disabled = true;
        var result = await ApplicationLanguagesController.AddLanguageToApplicationAsync(ApplicationId,
            new ApplicationLanguageOptions()
            {
                LanguageId = language
            });
            
        await OnInitializedAsync();
        await LanguagesChanged.InvokeAsync();


    }

    private async Task HandleDisableClick(string language)
    {
        var result = await ApplicationLanguagesController.RemoveLanguageFromApplicationAsync(ApplicationId,
            language);

           
        await OnInitializedAsync();
        await LanguagesChanged.InvokeAsync();
    }
}
