@using TranslationPro.Shared.Interfaces
@using TranslationPro.Shared.Proxies

@if (PhraseOutput == null)
{
    <Paragraph>Loading Translation Variants...</Paragraph>
}
else
{
    <Row HorizontalGutter="32" VerticalGutter="16">
        <Column ColumnSize="@ColumnSize.Is12">
            <CardDeck>
                <Translation Language="English" Text="@ApplicationPhraseDetails.Text"></Translation>
                <Translation Language="@Language.Name" Text="@Translation.Text"></Translation>
            </CardDeck>
        </Column>
    </Row>
    <Row HorizontalGutter="32" VerticalGutter="16">

        <Column ColumnSize="ColumnSize.Is12">

            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Text</TableHeaderCell>
                        <TableHeaderCell>Engine</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    <Repeater TItem="MachineTranslationOutput" Items="PhraseOutput.MachineTranslations">
                        <TableRow>
                            <TableRowCell>@context.Text</TableRowCell>
                            <TableRowCell>@context.Engine</TableRowCell>
                            <TableRowCell>
                                @if (context.Text != Translation.Text)
                                {
                                    <Button Disabled="@_isLoading" Color="@Color.Primary" Clicked="@(() => Callback(context.Text))">
                                        Use This Translation
                                    </Button>
                                }

                            </TableRowCell>
                        </TableRow>
                    </Repeater>
                </TableBody>
            </Table>

        </Column>

    </Row>
}

@code {

    [Parameter]
    public Guid ApplicationId { get; set; }

    [Parameter]
    public int PhraseId { get; set; }

    [Parameter]
    public string LanguageId { get; set; }

    [Inject]
    public IApplicationPhrasesController PhraseService { get; set; }

    [Inject]
    public ILanguagesController LanguageService { get; set; }

    public LanguageOutput Language { get; set; }

    [Inject]
    public TranslationsProxy TranslationService { get; set; }

    [Inject]
    public IApplicationTranslationsController ApplicationTranslationsController { get; set; }

    public PhraseOutput PhraseOutput { get; set; }

    public ApplicationPhraseDetails ApplicationPhraseDetails { get; set; }

    public ApplicationTranslationOutput Translation { get; set; }

    private bool _isLoading = false;

    public async Task LoadData()
    {
        Language = await LanguageService.GetLanguageAsync(LanguageId);
        ApplicationPhraseDetails = await PhraseService.GetPhraseAsync(ApplicationId, PhraseId);
        Translation = ApplicationPhraseDetails.Translations.First(x => x.LanguageId == LanguageId);
        var phraseList = await TranslationService.Translate(new PhraseBulkCreateOptions() { LanguageIds = new[] { LanguageId }, Texts = new[] { ApplicationPhraseDetails.Text } });

        if (phraseList.Count > 0)
        {
            PhraseOutput = phraseList[0];
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }


    private async Task Callback(string text)
    {
        _isLoading = true;
        var result = await ApplicationTranslationsController.ReplaceTranslation(ApplicationId, PhraseId,
            new TranslationReplacementOptions()
                {
                    Text = text,
                    LanguageId = LanguageId
                });
        _isLoading = false;
        await LoadData();
        StateHasChanged();
    }

}
