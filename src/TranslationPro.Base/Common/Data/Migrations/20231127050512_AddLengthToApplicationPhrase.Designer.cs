// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TranslationPro.Base.Common.Data.Contexts;

#nullable disable

namespace TranslationPro.Base.Common.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231127050512_AddLengthToApplicationPhrase")]
    partial class AddLengthToApplicationPhrase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireResourceIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiResource", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId", "Type")
                        .IsUnique();

                    b.ToTable("ApiResourceClaim", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId", "Key")
                        .IsUnique();

                    b.ToTable("ApiResourceProperty", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId", "Scope")
                        .IsUnique();

                    b.ToTable("ApiResourceScope", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceSecret", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiScope", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "My API",
                            Emphasize = false,
                            Enabled = true,
                            Name = "api1",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId", "Type")
                        .IsUnique();

                    b.ToTable("ApiScopeClaim", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId", "Key")
                        .IsUnique();

                    b.ToTable("ApiScopeProperty", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("CibaLifetime")
                        .HasColumnType("int");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<bool?>("CoordinateLifetimeWithUserSession")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("DPoPClockSkew")
                        .HasColumnType("time");

                    b.Property<int>("DPoPValidationMode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<string>("InitiateLoginUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PollingInterval")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireDPoP")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Client", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 400000,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = false,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = true,
                            AlwaysSendClientClaims = true,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "",
                            ClientId = "postman",
                            Created = new DateTime(2021, 9, 18, 13, 12, 13, 532, DateTimeKind.Unspecified).AddTicks(8105),
                            DPoPClockSkew = new TimeSpan(0, 0, 5, 0, 0),
                            DPoPValidationMode = 0,
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = true,
                            RequireConsent = false,
                            RequireDPoP = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        },
                        new
                        {
                            Id = 2,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 3600,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = false,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = true,
                            AlwaysSendClientClaims = true,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "client_",
                            ClientId = "client",
                            Created = new DateTime(2021, 9, 18, 13, 12, 13, 642, DateTimeKind.Unspecified).AddTicks(7421),
                            DPoPClockSkew = new TimeSpan(0, 0, 5, 0, 0),
                            DPoPValidationMode = 0,
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = true,
                            RequireConsent = false,
                            RequireDPoP = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        },
                        new
                        {
                            Id = 3,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 3600,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = false,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = true,
                            AlwaysSendClientClaims = true,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "client_",
                            ClientId = "mvc",
                            Created = new DateTime(2021, 9, 18, 13, 12, 13, 645, DateTimeKind.Unspecified).AddTicks(5968),
                            DPoPClockSkew = new TimeSpan(0, 0, 5, 0, 0),
                            DPoPValidationMode = 0,
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = true,
                            RequireConsent = false,
                            RequireDPoP = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        },
                        new
                        {
                            Id = 5,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 3600,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = false,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = true,
                            AlwaysSendClientClaims = false,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "client_",
                            ClientId = "translationpro",
                            ClientName = "TranslationPro",
                            Created = new DateTime(2021, 9, 18, 13, 12, 13, 653, DateTimeKind.Unspecified).AddTicks(7956),
                            DPoPClockSkew = new TimeSpan(0, 0, 5, 0, 0),
                            DPoPValidationMode = 0,
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = false,
                            RequireConsent = false,
                            RequireDPoP = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "Type", "Value")
                        .IsUnique();

                    b.ToTable("ClientClaim", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "Origin")
                        .IsUnique();

                    b.ToTable("ClientCorsOrigin", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ClientId = 5,
                            Origin = "https://localhost:44330"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 5,
                            Origin = "https://translationpro-app-test.azurewebsites.net"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 5,
                            Origin = "https://localhost:7243"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "GrantType")
                        .IsUnique();

                    b.ToTable("ClientGrantType", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            GrantType = "password"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            GrantType = "client_credentials"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 3,
                            GrantType = "authorization_code"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            GrantType = "authorization_code"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "Provider")
                        .IsUnique();

                    b.ToTable("ClientIdPRestriction", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "PostLogoutRedirectUri")
                        .IsUnique();

                    b.ToTable("ClientPostLogoutRedirectUri", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            PostLogoutRedirectUri = "https://localhost:5002/signout-callback-oidc"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 5,
                            PostLogoutRedirectUri = "https://localhost:44330/authentication/logout-callback"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 5,
                            PostLogoutRedirectUri = "https://translationpro-app-test.azurewebsites.net/authentication/logout-callback"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            PostLogoutRedirectUri = "https://localhost:7243/authentication/logout-callback"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "Key")
                        .IsUnique();

                    b.ToTable("ClientProperty", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "RedirectUri")
                        .IsUnique();

                    b.ToTable("ClientRedirectUri", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            RedirectUri = "https://localhost:5002/signin-oidc"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 5,
                            RedirectUri = "https://localhost:44330/authentication/login-callback"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 5,
                            RedirectUri = "https://translationpro-app-test.azurewebsites.net/authentication/login-callback"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            RedirectUri = "https://localhost:7243/authentication/login-callback"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "Scope")
                        .IsUnique();

                    b.ToTable("ClientScope", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            Scope = "openid"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Scope = "api1"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Scope = "api1"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 1,
                            Scope = "api1"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 1,
                            Scope = "profile"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 1,
                            Scope = "openid"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 3,
                            Scope = "profile"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 5,
                            Scope = "api1"
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 5,
                            Scope = "profile"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 5,
                            Scope = "openid"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecret", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Created = new DateTime(2021, 9, 17, 13, 19, 6, 414, DateTimeKind.Unspecified).AddTicks(3771),
                            Type = "SharedSecret",
                            Value = "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols="
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Created = new DateTime(2021, 9, 17, 13, 19, 6, 564, DateTimeKind.Unspecified).AddTicks(8731),
                            Type = "SharedSecret",
                            Value = "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols="
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Created = new DateTime(2021, 9, 17, 13, 19, 6, 568, DateTimeKind.Unspecified).AddTicks(1345),
                            Type = "SharedSecret",
                            Value = "K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols="
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceFlowCodes", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IdentityProviders");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IdentityResource", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 9, 17, 3, 58, 20, 206, DateTimeKind.Unspecified).AddTicks(3232),
                            Description = "Your user profile information (first name, last name, etc.)",
                            DisplayName = "User profile",
                            Emphasize = true,
                            Enabled = true,
                            Name = "profile",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 9, 17, 3, 58, 20, 185, DateTimeKind.Unspecified).AddTicks(7082),
                            DisplayName = "Your user identifier",
                            Emphasize = false,
                            Enabled = true,
                            Name = "openid",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId", "Type")
                        .IsUnique();

                    b.ToTable("IdentityResourceClaim", "IdentityServer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityResourceId = 1,
                            Type = "website"
                        },
                        new
                        {
                            Id = 2,
                            IdentityResourceId = 1,
                            Type = "picture"
                        },
                        new
                        {
                            Id = 3,
                            IdentityResourceId = 1,
                            Type = "profile"
                        },
                        new
                        {
                            Id = 4,
                            IdentityResourceId = 1,
                            Type = "preferred_username"
                        },
                        new
                        {
                            Id = 5,
                            IdentityResourceId = 1,
                            Type = "nickname"
                        },
                        new
                        {
                            Id = 6,
                            IdentityResourceId = 1,
                            Type = "middle_name"
                        },
                        new
                        {
                            Id = 7,
                            IdentityResourceId = 1,
                            Type = "given_name"
                        },
                        new
                        {
                            Id = 8,
                            IdentityResourceId = 1,
                            Type = "family_name"
                        },
                        new
                        {
                            Id = 9,
                            IdentityResourceId = 1,
                            Type = "name"
                        },
                        new
                        {
                            Id = 10,
                            IdentityResourceId = 1,
                            Type = "gender"
                        },
                        new
                        {
                            Id = 11,
                            IdentityResourceId = 1,
                            Type = "birthdate"
                        },
                        new
                        {
                            Id = 12,
                            IdentityResourceId = 1,
                            Type = "zoneinfo"
                        },
                        new
                        {
                            Id = 13,
                            IdentityResourceId = 1,
                            Type = "locale"
                        },
                        new
                        {
                            Id = 14,
                            IdentityResourceId = 1,
                            Type = "updated_at"
                        },
                        new
                        {
                            Id = 15,
                            IdentityResourceId = 2,
                            Type = "sub"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId", "Key")
                        .IsUnique();

                    b.ToTable("IdentityResourceProperty", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Key", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", "IdentityServer");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ServerSideSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Renewed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Expires");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("SessionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ServerSideSession", "IdentityServer");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrentPhraseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Application", "TranslationPro");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationLanguage", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ApplicationLanguage", "TranslationPro");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationPhrase", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CharacterCount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("LEN([Text])");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId", "Id");

                    b.ToTable("ApplicationPhrase", "TranslationPro");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationTranslation", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhraseId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MachineTranslations")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId", "PhraseId", "LanguageId");

                    b.HasIndex("ApplicationId", "LanguageId");

                    b.ToTable("ApplicationTranslation", "TranslationPro");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvitationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvitationReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser", "TranslationPro");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language", "TranslationPro");

                    b.HasData(
                        new
                        {
                            Id = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = "es",
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = "fr",
                            Name = "French"
                        },
                        new
                        {
                            Id = "de",
                            Name = "German"
                        },
                        new
                        {
                            Id = "zh-CN",
                            Name = "Chinese (Simplified)"
                        },
                        new
                        {
                            Id = "zh-TW",
                            Name = "Chinese (Traditional)"
                        },
                        new
                        {
                            Id = "ja",
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = "ko",
                            Name = "Korean"
                        },
                        new
                        {
                            Id = "ru",
                            Name = "Russian"
                        },
                        new
                        {
                            Id = "ar",
                            Name = "Arabic"
                        },
                        new
                        {
                            Id = "hi",
                            Name = "Hindi"
                        },
                        new
                        {
                            Id = "pt",
                            Name = "Portugese (Brazil)"
                        },
                        new
                        {
                            Id = "pt-pt",
                            Name = "Portugese (Portugal)"
                        },
                        new
                        {
                            Id = "it",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = "nl",
                            Name = "Dutch"
                        },
                        new
                        {
                            Id = "sv",
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = "no",
                            Name = "Norwegian"
                        },
                        new
                        {
                            Id = "da",
                            Name = "Danish"
                        },
                        new
                        {
                            Id = "fi",
                            Name = "Finnish"
                        },
                        new
                        {
                            Id = "el",
                            Name = "Greek"
                        },
                        new
                        {
                            Id = "tr",
                            Name = "Turkish"
                        },
                        new
                        {
                            Id = "iw",
                            Name = "Hebrew"
                        },
                        new
                        {
                            Id = "th",
                            Name = "Thai"
                        },
                        new
                        {
                            Id = "vi",
                            Name = "Vietnamese"
                        },
                        new
                        {
                            Id = "pl",
                            Name = "Polish"
                        },
                        new
                        {
                            Id = "cs",
                            Name = "Czech"
                        },
                        new
                        {
                            Id = "hu",
                            Name = "Hungarian"
                        },
                        new
                        {
                            Id = "af",
                            Name = "Afrikaans"
                        },
                        new
                        {
                            Id = "sq",
                            Name = "Albanian"
                        },
                        new
                        {
                            Id = "am",
                            Name = "Amharic"
                        },
                        new
                        {
                            Id = "hy",
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = "as",
                            Name = "Assamese"
                        },
                        new
                        {
                            Id = "az",
                            Name = "Azerbaijani (Latin)"
                        },
                        new
                        {
                            Id = "bn",
                            Name = "Bangla"
                        },
                        new
                        {
                            Id = "ba",
                            Name = "Bashkir"
                        },
                        new
                        {
                            Id = "eu",
                            Name = "Basque"
                        },
                        new
                        {
                            Id = "bho",
                            Name = "Bhojpuri"
                        },
                        new
                        {
                            Id = "brx",
                            Name = "Bodo"
                        },
                        new
                        {
                            Id = "bs",
                            Name = "Bosnian (Latin)"
                        },
                        new
                        {
                            Id = "bg",
                            Name = "Bulgarian"
                        },
                        new
                        {
                            Id = "ca",
                            Name = "Catalan"
                        },
                        new
                        {
                            Id = "hr",
                            Name = "Croatian"
                        },
                        new
                        {
                            Id = "prs",
                            Name = "Dari"
                        },
                        new
                        {
                            Id = "dv",
                            Name = "Divehi"
                        },
                        new
                        {
                            Id = "doi",
                            Name = "Dogri"
                        },
                        new
                        {
                            Id = "et",
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = "fo",
                            Name = "Faroese"
                        },
                        new
                        {
                            Id = "fj",
                            Name = "Fijian"
                        },
                        new
                        {
                            Id = "fil",
                            Name = "Filipino"
                        },
                        new
                        {
                            Id = "tl",
                            Name = "Filipino (Tagalog)"
                        },
                        new
                        {
                            Id = "fr-ca",
                            Name = "French (Canada)"
                        },
                        new
                        {
                            Id = "gl",
                            Name = "Galician"
                        },
                        new
                        {
                            Id = "ka",
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = "gu",
                            Name = "Gujarati"
                        },
                        new
                        {
                            Id = "ht",
                            Name = "Haitian Creole"
                        },
                        new
                        {
                            Id = "ha",
                            Name = "Hausa"
                        },
                        new
                        {
                            Id = "mww",
                            Name = "Hmong Daw (Latin)"
                        },
                        new
                        {
                            Id = "is",
                            Name = "Icelandic"
                        },
                        new
                        {
                            Id = "ig",
                            Name = "Igbo"
                        },
                        new
                        {
                            Id = "id",
                            Name = "Indonesian"
                        },
                        new
                        {
                            Id = "ikt",
                            Name = "Inuinnaqtun"
                        },
                        new
                        {
                            Id = "iu",
                            Name = "Inuktitut"
                        },
                        new
                        {
                            Id = "itu-Latin",
                            Name = "Inuktitut (Latin)"
                        },
                        new
                        {
                            Id = "ir",
                            Name = "Irish"
                        },
                        new
                        {
                            Id = "kn",
                            Name = "Kannada"
                        },
                        new
                        {
                            Id = "ks",
                            Name = "Kashmiri"
                        },
                        new
                        {
                            Id = "kk",
                            Name = "Kazahk"
                        },
                        new
                        {
                            Id = "km",
                            Name = "Kymer"
                        },
                        new
                        {
                            Id = "rw",
                            Name = "Kiyarwanda"
                        },
                        new
                        {
                            Id = "tlh-Latn",
                            Name = "Klingon"
                        },
                        new
                        {
                            Id = "gom",
                            Name = "Konkani"
                        },
                        new
                        {
                            Id = "ku",
                            Name = "Kurdish (Central)"
                        },
                        new
                        {
                            Id = "kmr",
                            Name = "Kurdish (Northern)"
                        },
                        new
                        {
                            Id = "ky",
                            Name = "Kyrgyz"
                        },
                        new
                        {
                            Id = "lo",
                            Name = "Lao"
                        },
                        new
                        {
                            Id = "lv",
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = "lt",
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = "ln",
                            Name = "Lingala"
                        },
                        new
                        {
                            Id = "dsb",
                            Name = "Lower Sorbian"
                        },
                        new
                        {
                            Id = "lug",
                            Name = "Liganda"
                        },
                        new
                        {
                            Id = "mk",
                            Name = "Macedonian"
                        },
                        new
                        {
                            Id = "mai",
                            Name = "Maithili"
                        },
                        new
                        {
                            Id = "mg",
                            Name = "Malagasy"
                        },
                        new
                        {
                            Id = "ms",
                            Name = "Malay (Latin)"
                        },
                        new
                        {
                            Id = "ml",
                            Name = "Malayalam"
                        },
                        new
                        {
                            Id = "mt",
                            Name = "Maltese"
                        },
                        new
                        {
                            Id = "mi",
                            Name = "Maori"
                        },
                        new
                        {
                            Id = "mr",
                            Name = "Marathi"
                        },
                        new
                        {
                            Id = "mn-Cyrl",
                            Name = "Mongolian (Cyrillic)"
                        },
                        new
                        {
                            Id = "mn-Mong",
                            Name = "Mongilian (Traditional)"
                        },
                        new
                        {
                            Id = "my",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = "ne",
                            Name = "Nepali"
                        },
                        new
                        {
                            Id = "nya",
                            Name = "Nyanja"
                        },
                        new
                        {
                            Id = "or",
                            Name = "Odia"
                        },
                        new
                        {
                            Id = "ps",
                            Name = "Pashto"
                        },
                        new
                        {
                            Id = "fa",
                            Name = "Persian"
                        },
                        new
                        {
                            Id = "pa",
                            Name = "Punjabi"
                        },
                        new
                        {
                            Id = "otq",
                            Name = "Queretaro"
                        },
                        new
                        {
                            Id = "ro",
                            Name = "Romanian"
                        },
                        new
                        {
                            Id = "run",
                            Name = "Rundi"
                        },
                        new
                        {
                            Id = "sm",
                            Name = "Samoan (Latin)"
                        },
                        new
                        {
                            Id = "sr-Cyrl",
                            Name = "Serbian (Cyrillic)"
                        },
                        new
                        {
                            Id = "sr-Latn",
                            Name = "Serbian (Latin)"
                        },
                        new
                        {
                            Id = "st",
                            Name = "Sesotho"
                        },
                        new
                        {
                            Id = "nso",
                            Name = "Sesotho sa Leboa"
                        },
                        new
                        {
                            Id = "tn",
                            Name = "Setswana"
                        },
                        new
                        {
                            Id = "sd",
                            Name = "Sindhi"
                        },
                        new
                        {
                            Id = "si",
                            Name = "Sinhala"
                        },
                        new
                        {
                            Id = "sk",
                            Name = "Slovak"
                        },
                        new
                        {
                            Id = "sl",
                            Name = "Slovenian"
                        },
                        new
                        {
                            Id = "so",
                            Name = "Somali (Arabic)"
                        },
                        new
                        {
                            Id = "sw",
                            Name = "Swahili (Latin)"
                        },
                        new
                        {
                            Id = "ty",
                            Name = "Tahitian"
                        },
                        new
                        {
                            Id = "ta",
                            Name = "Tamil"
                        },
                        new
                        {
                            Id = "tt",
                            Name = "Tatar (Latin)"
                        },
                        new
                        {
                            Id = "te",
                            Name = "Telugu"
                        },
                        new
                        {
                            Id = "bo",
                            Name = "Tibetan"
                        },
                        new
                        {
                            Id = "ti",
                            Name = "Tigrinya"
                        },
                        new
                        {
                            Id = "to",
                            Name = "Tongan"
                        },
                        new
                        {
                            Id = "tk",
                            Name = "Tirkmen (Latin)"
                        },
                        new
                        {
                            Id = "uk",
                            Name = "Ukranian"
                        },
                        new
                        {
                            Id = "hsb",
                            Name = "Upper Sorbian"
                        },
                        new
                        {
                            Id = "ur",
                            Name = "Urdu"
                        },
                        new
                        {
                            Id = "ug",
                            Name = "Uyghur (Arabic)"
                        },
                        new
                        {
                            Id = "uz",
                            Name = "Uzbek (Latin)"
                        },
                        new
                        {
                            Id = "cy",
                            Name = "Welsh"
                        },
                        new
                        {
                            Id = "xh",
                            Name = "Zhosa"
                        },
                        new
                        {
                            Id = "yo",
                            Name = "Yoruba"
                        },
                        new
                        {
                            Id = "yua",
                            Name = "Yucatec Maya"
                        },
                        new
                        {
                            Id = "zu",
                            Name = "Zulu"
                        },
                        new
                        {
                            Id = "es-MX",
                            Name = "Spanish (Mexico)"
                        },
                        new
                        {
                            Id = "sn",
                            Name = "ChiShona"
                        });
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1Check")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZipCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CvcCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DefaultForCurrency")
                        .HasColumnType("bit");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DynamicLast4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExpMonth")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpYear")
                        .HasColumnType("bigint");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Funding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenizationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Card", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCharge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountCaptured")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountRefunded")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalculatedStatementDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Captured")
                        .HasColumnType("bit");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disputed")
                        .HasColumnType("bit");

                    b.Property<string>("FailureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Refunded")
                        .HasColumnType("bit");

                    b.Property<string>("StatementDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementDescriptorSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Charge", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCoupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("AmountOff")
                        .HasColumnType("bigint");

                    b.Property<int>("Created")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DurationInMonths")
                        .HasColumnType("bigint");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<long?>("MaxRedemptions")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PercentOff")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("RedeemBy")
                        .HasColumnType("bigint");

                    b.Property<long>("TimesRedeemed")
                        .HasColumnType("bigint");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coupon", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCouponProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponProduct", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delinquent")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NextInvoiceSequence")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxExempt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customer", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeDiscount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("Discount", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeDispute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Dispute", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AmountCaptured")
                        .HasColumnType("int");

                    b.Property<long>("AmountDue")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountPaid")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountRemaining")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountShipping")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationFeeAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("AttemptCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Attempted")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoAdvance")
                        .HasColumnType("bit");

                    b.Property<string>("BillingReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Captured")
                        .HasColumnType("bit");

                    b.Property<string>("ChargeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Created")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerTaxExempt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EndingBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostedInvoiceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextPaymentAttempt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<bool>("PaidOutOfBand")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostPaymentCreditNotesAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("PrePaymentCreditNotesAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Refunded")
                        .HasColumnType("bit");

                    b.Property<long>("StartingBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("StatementDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Subtotal")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubtotalExcludingTax")
                        .HasColumnType("bigint");

                    b.Property<long?>("Tax")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalExcludingTax")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("WebhooksDeliveredAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Invoice", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceDiscount", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId", "DiscountId");

                    b.HasIndex("DiscountId")
                        .IsUnique();

                    b.ToTable("InvoiceDiscount", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountExcludingTax")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discountable")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Proration")
                        .HasColumnType("bit");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriptionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitAmountExcludingTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PriceId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("SubscriptionItemId");

                    b.ToTable("InvoiceLineItem", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItemDiscount", b =>
                {
                    b.Property<string>("InvoiceLineItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceLineItemId", "DiscountId");

                    b.HasIndex("DiscountId")
                        .IsUnique();

                    b.ToTable("InvoiceItemDiscount", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentIntent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("CaptureMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Created")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("StripeInvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StripeInvoiceId");

                    b.ToTable("PaymentIntent", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentIntentInvoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId", "PaymentIntentId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PaymentIntentId")
                        .IsUnique();

                    b.ToTable("InvoicePaymentIntent", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPromotionCodes")
                        .HasColumnType("bit");

                    b.Property<string>("BillingAddressCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Livemode")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethodCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentLink", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentLinkLineItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("AmountDiscount")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountSubtotal")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountTax")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountTotal")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentLinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("StripePaymentLinkLineItemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentLinkId");

                    b.HasIndex("PriceId");

                    b.HasIndex("StripePaymentLinkLineItemId");

                    b.ToTable("LineItem", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PaymentMethod", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePayout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Payout", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePrice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BillingScheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("LookupKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaxBehavior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiersMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitAmount")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("UnitAmountDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Price", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StripeProduct", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeProductFeature", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "Name");

                    b.ToTable("ProductFeature", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePromotionCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("PromotionCode", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeRefund", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChargeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("Refund", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Session", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSetupIntent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("SetupIntent", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("ApplicationFeePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillingCycleAnchor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectionMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DaysUntilDue")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextPendingInvoiceItemInvoice")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TrialEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrialStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Subscription", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<string>("PriceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionItem", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndBehavior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveMode")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleasedSubscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SubscriptionSchedule", "Stripe");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "20f1b6e7-64b7-4658-9f5a-ca9b73da374e",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "20f1b6e7-64b7-4658-9f5a-ca9b73da374e",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a1f1ee5-0ce2-4b5d-88be-4373574ef024",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Rod",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWd/iQx36LYevmQZ7567wkLZT31FgSYJiEiNwdMi9oYappMoiWnbGCOZOsbO5325g==",
                            PhoneNumber = "123-123-1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GHCMP3XRBQUGXXFNLNP4UCVZAHL73RZ6",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserLogin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ProviderKey", "LoginProvider");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationLanguage", b =>
                {
                    b.HasOne("TranslationPro.Base.Entities.Application", "Application")
                        .WithMany("Languages")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Entities.Language", "Language")
                        .WithMany("Applications")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationPhrase", b =>
                {
                    b.HasOne("TranslationPro.Base.Entities.Application", "Application")
                        .WithMany("Phrases")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationTranslation", b =>
                {
                    b.HasOne("TranslationPro.Base.Entities.ApplicationLanguage", "ApplicationLanguage")
                        .WithMany("Translations")
                        .HasForeignKey("ApplicationId", "LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Entities.ApplicationPhrase", "ApplicationPhrase")
                        .WithMany("Translations")
                        .HasForeignKey("ApplicationId", "PhraseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLanguage");

                    b.Navigation("ApplicationPhrase");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationUser", b =>
                {
                    b.HasOne("TranslationPro.Base.Entities.Application", "Application")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCard", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCharge", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("Charges")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoice", "Invoice")
                        .WithMany("Charges")
                        .HasForeignKey("InvoiceId");

                    b.OwnsOne("TranslationPro.Base.Stripe.Entities.StripeChargeOutcome", "Outcome", b1 =>
                        {
                            b1.Property<string>("StripeChargeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("NetworkStatus")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Reason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RiskLevel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("RiskScore")
                                .HasColumnType("bigint");

                            b1.Property<string>("SellerMessage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StripeChargeId");

                            b1.ToTable("Charge", "Stripe");

                            b1.WithOwner()
                                .HasForeignKey("StripeChargeId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Outcome");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCouponProduct", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCoupon", "Coupon")
                        .WithMany("Products")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeProduct", "Product")
                        .WithMany("Coupons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCustomer", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripeCustomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TranslationPro.Base.Stripe.Entities.StripeAddress", "Address", b1 =>
                        {
                            b1.Property<string>("StripeCustomerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StripeCustomerId");

                            b1.ToTable("Customer", "Stripe");

                            b1.WithOwner()
                                .HasForeignKey("StripeCustomerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeDiscount", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCoupon", "Coupon")
                        .WithMany("Discounts")
                        .HasForeignKey("CouponId");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoice", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCharge", "Charge")
                        .WithMany()
                        .HasForeignKey("ChargeId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeSubscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId");

                    b.OwnsOne("TranslationPro.Base.Stripe.Entities.StripeAddress", "CustomerAddress", b1 =>
                        {
                            b1.Property<string>("StripeInvoiceId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StripeInvoiceId");

                            b1.ToTable("Invoice", "Stripe");

                            b1.WithOwner()
                                .HasForeignKey("StripeInvoiceId");
                        });

                    b.Navigation("Charge");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAddress");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceDiscount", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeDiscount", "Discount")
                        .WithOne("InvoiceDiscount")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripeInvoiceDiscount", "DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoice", "Invoice")
                        .WithMany("Discounts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItem", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePrice", "Price")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("PriceId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeSubscription", "Subscription")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeSubscriptionItem", "SubscriptionItem")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("SubscriptionItemId");

                    b.Navigation("Invoice");

                    b.Navigation("Price");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionItem");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItemDiscount", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeDiscount", "Discount")
                        .WithOne("InvoiceLineItemDiscount")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItemDiscount", "DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItem", "InvoiceLineItem")
                        .WithMany("Discounts")
                        .HasForeignKey("InvoiceLineItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("InvoiceLineItem");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentIntent", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("PaymentIntents")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoice", null)
                        .WithMany("PaymentIntents")
                        .HasForeignKey("StripeInvoiceId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentIntentInvoice", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeInvoice", "Invoice")
                        .WithOne("PaymentIntent")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripePaymentIntentInvoice", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePaymentIntent", "PaymentIntent")
                        .WithOne("Invoice")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripePaymentIntentInvoice", "PaymentIntentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentIntent");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentLinkLineItem", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePaymentLink", "PaymentLink")
                        .WithMany("LineItems")
                        .HasForeignKey("PaymentLinkId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePrice", "Price")
                        .WithMany("PaymentLinkLineItems")
                        .HasForeignKey("PriceId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePaymentLinkLineItem", null)
                        .WithMany("LineItems")
                        .HasForeignKey("StripePaymentLinkLineItemId");

                    b.Navigation("PaymentLink");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentMethod", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Card");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePrice", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeProduct", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId");

                    b.OwnsOne("TranslationPro.Base.Stripe.Entities.StripePriceRecurring", "Recurring", b1 =>
                        {
                            b1.Property<string>("StripePriceId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AggregateUsage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Interval")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("IntervalCount")
                                .HasColumnType("bigint");

                            b1.Property<long?>("TrialPeriodDays")
                                .HasColumnType("bigint");

                            b1.Property<string>("UsageType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StripePriceId");

                            b1.ToTable("Price", "Stripe");

                            b1.WithOwner()
                                .HasForeignKey("StripePriceId");
                        });

                    b.Navigation("Product");

                    b.Navigation("Recurring");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeProductFeature", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeProduct", "Product")
                        .WithMany("Features")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePromotionCode", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCoupon", "Coupon")
                        .WithMany("PromotionCodes")
                        .HasForeignKey("CouponId");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeRefund", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCharge", "Charge")
                        .WithMany("Refunds")
                        .HasForeignKey("ChargeId");

                    b.Navigation("Charge");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSetupIntent", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithOne("SetupIntent")
                        .HasForeignKey("TranslationPro.Base.Stripe.Entities.StripeSetupIntent", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscription", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeDiscount", "Discount")
                        .WithMany("Subscriptions")
                        .HasForeignKey("DiscountId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePaymentMethod", "PaymentMethod")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeSubscriptionSchedule", "Schedule")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Customer");

                    b.Navigation("Discount");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionItem", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripePrice", "Price")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("PriceId");

                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeSubscription", "Subscription")
                        .WithMany("Items")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("Price");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionSchedule", b =>
                {
                    b.HasOne("TranslationPro.Base.Stripe.Entities.StripeCustomer", "Customer")
                        .WithMany("Schedules")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.RoleClaim", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserClaim", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserLogin", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserRole", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.UserToken", b =>
                {
                    b.HasOne("TranslationPro.Base.Users.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.Application", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("Phrases");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationLanguage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.ApplicationPhrase", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TranslationPro.Base.Entities.Language", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCharge", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCoupon", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Products");

                    b.Navigation("PromotionCodes");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeCustomer", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Charges");

                    b.Navigation("Invoices");

                    b.Navigation("PaymentIntents");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Schedules");

                    b.Navigation("SetupIntent");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeDiscount", b =>
                {
                    b.Navigation("InvoiceDiscount");

                    b.Navigation("InvoiceLineItemDiscount");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoice", b =>
                {
                    b.Navigation("Charges");

                    b.Navigation("Discounts");

                    b.Navigation("Lines");

                    b.Navigation("PaymentIntent");

                    b.Navigation("PaymentIntents");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeInvoiceLineItem", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentIntent", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentLink", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentLinkLineItem", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePaymentMethod", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripePrice", b =>
                {
                    b.Navigation("InvoiceLineItems");

                    b.Navigation("PaymentLinkLineItems");

                    b.Navigation("SubscriptionItems");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeProduct", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Features");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscription", b =>
                {
                    b.Navigation("InvoiceLineItems");

                    b.Navigation("Invoices");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionItem", b =>
                {
                    b.Navigation("InvoiceLineItems");
                });

            modelBuilder.Entity("TranslationPro.Base.Stripe.Entities.StripeSubscriptionSchedule", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TranslationPro.Base.Users.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Customer");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
